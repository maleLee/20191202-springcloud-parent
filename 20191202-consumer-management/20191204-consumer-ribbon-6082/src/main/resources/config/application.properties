server.port=6082
server.servlet.context-path=/

# consumer不需要注册到eureka里
eureka.client.register-with-eureka=false
# consumer发现自己有意义么？没有意义的
# eureka.client.fetch-registry=false
# 配置eureka的地址
eureka.client.service-url.defaultZone=http://eureka01:7081/eureka,http://eureka02:7082/eureka,http://eureka03:7083/eureka

# 实现ribbon脱离eureka的负载均衡
# 配置ribbon不加载eureka
# ribbon.eureka.enabled=false
# 脱离了eureka就意味着consumer就没有了服务发现，也就是说不能再通过Application的值进行调用
# 如果仍然需要实现负载均衡，就必须要知道provider的ip和端口号
# 声明provider的ip和端口号
# provider的application.properties配置文件的spring.application.name的值(小写)
# 获取当前以book-provider开头的所有服务器的列表
# book-provider.ribbon.listOfServers=localhost:8081,localhost:8082,localhost:8083
# 指定ribbon的算法 Class.forName("Book");
# book-provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule