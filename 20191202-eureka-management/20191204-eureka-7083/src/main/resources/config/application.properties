server.port=7083
server.servlet.context-path=/

# 数据可用性是无论是否处于宕机都可以获取到数据信息(可能获取的数据是脏数据)
# 也就是说为了保证eureka的AP特性，会把所有的任意组件自动的向自己注册(包括自己)
# 不把自己注册到注册中心里
eureka.client.register-with-eureka=false
# eureka还会自动的发现自己(eureka也会默认的把所有组件做服务发现)
# 和springcloud的特性有关(和微服务特性有关)--->项目既可以是provider也可以是consumer
# 配置eureka不发现自己
eureka.client.fetch-registry=false

# 在Linux中都会有HOSTNAME，eureka会独立存在，不绑定任何项目，最终会部署在Linux服务器上
# ssh ip地址/HOSTNAME
# 配置了eureka的hostname--->eureka01
# eureka.instance.hostname=localhost
eureka.instance.hostname=eureka03

# 配置了eureka的注册中心地址
# defaultZone:默认值是defaultZone，可以任意改变
# order
# cart
# portal
# rent
# wechart
# defaultZone其实相当于命名空间，根据命名空间的不同存放的provider数据不同
# eureka.client.service-url.defaultZone=http://localhost:7081/eureka
# 以上的配置为单节点，现在需要配置eureka的集群版，因为最终eureka的每一个节点都是平等节点，所以必须要让eureka的所有节点认识对方
eureka.client.service-url.defaultZone=http://eureka02:7082/eureka,http://eureka01:7081/eureka

# 关闭eureka的自我保护机制
# eureka.server.enable-self-preservation=false

# eureka默认检测(接收)心跳的时间30s-->30000ms---->从30s缩短到8s(10s)
# eureka.server.eviction-interval-timer-in-ms=8000

# 配置zipkin的服务器端的地址
spring.zipkin.base-url=http://localhost:4081
# 配置链信息采集样率
# 百分比 0.1:只提交10%的信息，1.0可以提交100%的信息
spring.sleuth.sampler.probability=1.0